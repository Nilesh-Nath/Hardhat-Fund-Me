{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/converter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary converter {\n    //Library functions should be internal\n    function getPrice(\n        AggregatorV3Interface priceFeedAddress\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeedAddress.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function convertPrice(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeedAddress\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeedAddress);\n        return ((ethAmount * ethPrice) / 1e18);\n    }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./converter.sol\";\n\ncontract FundMe {\n    uint256 private minimumUSD = 50 * 1e18;\n    using converter for uint256;\n    address[] public funders;\n    mapping(address => uint256) public fundersToFund;\n    address private owner;\n    AggregatorV3Interface public priceFeedAddress;\n\n    constructor(address dataPriceFeedAddress) {\n        owner = msg.sender;\n        priceFeedAddress = AggregatorV3Interface(dataPriceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.convertPrice(priceFeedAddress) > minimumUSD,\n            \"Not Paid Enough!\"\n        );\n        address funder = msg.sender;\n        funders.push(funder);\n        fundersToFund[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // payable(msg.sender).transfer(address(this).balance);\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Unsuccessfull!\");\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            fundersToFund[funder] = 0;\n        }\n\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Withdraw Failed!\");\n    }\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"Sorry , Only owners can withdraw Fund :( )\"\n        );\n        _;\n    }\n\n    function getterOwner() public view returns (address) {\n        return owner;\n    }\n\n    function getterMinimumUSD() public view returns (uint256) {\n        return minimumUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}